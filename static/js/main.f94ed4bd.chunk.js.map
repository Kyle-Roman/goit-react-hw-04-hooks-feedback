{"version":3,"sources":["components/Feedback/Feedback.module.css","components/FeedbackOptions/ButtonSet.module.css","components/Notification/Notification.module.css","components/Feedback/Stats.js","components/FeedbackOptions/ButtonSet.js","components/Section/Section.js","components/Notification/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Stats","onGood","onNeutral","onBad","onTotal","onPositivePercentage","totalBtnClasses","s","listItem","total","className","stats","label","join","percentage","ButtonSet","options","onClick","map","option","type","button","Section","title","children","Notification","message","Feedback","useState","good","leaveGoodFeedback","neutral","leaveNeutralFeedback","bad","leaveBadFeedback","countTotalFeedback","feedback","clickedBtn","prevState","Math","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f94ed4bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"Feedback_stats__1CldO\",\"listItem\":\"Feedback_listItem__1npcP\",\"label\":\"Feedback_label__2FaRl\",\"total\":\"Feedback_total__3Xpws\",\"percentage\":\"Feedback_percentage__m6rhO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ButtonSet_button__byrEQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__7lvHd\"};","import React from \"react\";\r\nimport s from './Feedback.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Stats({ onGood, onNeutral, onBad, onTotal, onPositivePercentage }) {\r\n    const totalBtnClasses = [s.listItem, s.total]\r\n    return <div>\r\n      <ul className={s.stats}>\r\n        <li className={s.listItem}>\r\n          <p className={s.label}>Good {onGood}</p>\r\n        </li>\r\n        <li className={s.listItem}>\r\n          <p className={s.label}>Neutral {onNeutral}</p>\r\n        </li>\r\n        <li className={s.listItem}>\r\n          <p className={s.label}>Bad {onBad}</p>\r\n        </li>\r\n        <li className={s.listItem}>\r\n          <p className={totalBtnClasses.join(' ')}>Total {onTotal}</p>\r\n        </li>\r\n        <li className={s.listItem}>\r\n          <p className={s.label}>Positive feedback \r\n            <span className={s.percentage}> {onPositivePercentage}%</span>\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n}\r\n\r\nStats.propTypes = {\r\n  onGood: PropTypes.number,\r\n  onNeutral: PropTypes.number,\r\n  onBad: PropTypes.number,\r\n  onTotal: PropTypes.number,\r\n  onPositivePercentage: PropTypes.number,\r\n};","import React from \"react\";\r\nimport s from './ButtonSet.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ButtonSet({options, onClick}) {\r\n    return <div>\r\n        {options.map(option => (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        className={s.button}        \r\n        onClick={() => {onClick(option)}}\r\n        >{option}\r\n      </button>\r\n    ))}\r\n    </div>\r\n}\r\n\r\nButtonSet.propTypes = {\r\n  options: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n};","import React from 'react';\r\nimport s from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title = '', children }) {\r\n    return <div>\r\n        {title && <h2 className={s.title}>{title}</h2>}\r\n        {children}\r\n    </div>\r\n   \r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport s from './Notification.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message = ''}) {\r\n    return <p className={s.message}>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};","import {useState} from 'react';\r\nimport Stats from './Stats'\r\nimport s from './Feedback.module.css';\r\nimport ButtonSet from '../FeedbackOptions/ButtonSet';\r\nimport Section from '../Section/Section';\r\nimport Notification from '../Notification/Notification';\r\n\r\nexport default function Feedback() {\r\n  const [good, leaveGoodFeedback] = useState(0);\r\n  const [neutral, leaveNeutralFeedback] = useState(0);\r\n  const [bad, leaveBadFeedback] = useState(0);\r\n\r\n  const FeedbackOptions = ['good', 'neutral', 'bad'];\r\n\r\n  const onLeaveFeedback = (clickedBtn) => {\r\n\r\n      switch (clickedBtn) {         \r\n        case 'good':\r\n          leaveGoodFeedback(prevState => prevState + 1);\r\n          break;\r\n        case 'neutral':\r\n          leaveNeutralFeedback(prevState => prevState + 1);\r\n          break;\r\n        case 'bad':\r\n          leaveBadFeedback(prevState => prevState + 1);\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n  }\r\n  \r\n  const countTotalFeedback = () => {\r\n        return good + neutral + bad;\r\n      }\r\n  \r\n  const countPositiveFeedbackPercentage = () => {\r\n      return Math.round((good / countTotalFeedback()) * 100);\r\n    }\r\n  \r\n  return (\r\n    <div className={s.feedback}>\r\n      <Section className={s.title} title=\"Please give us Your feedback!\">\r\n        <ButtonSet\r\n          options = {FeedbackOptions}\r\n          onClick={onLeaveFeedback} \r\n        />      \r\n      </Section>               \r\n\r\n      <Section className={s.title} title=\"Statistics\">\r\n        {countTotalFeedback() > 0 ? (\r\n          <Stats \r\n          onGood={good} \r\n          onNeutral={neutral} \r\n          onBad={bad}\r\n          onTotal = {countTotalFeedback()}\r\n          onPositivePercentage = {countPositiveFeedbackPercentage()}\r\n          />   \r\n              ) : (\r\n          <Notification message=\"No feedback given\"/>       \r\n        )}        \r\n      </Section>\r\n    </div>\r\n  )\r\n}","import Feedback from './components/Feedback/Feedback'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}